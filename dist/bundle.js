(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"body{\n    max-width:95vw;\n    display: flex;\n    justify-content: center;\n}\n\n#content{\n    display: flex; \n    flex-direction: column; \n    height: 100vh; \n    width: 75vw; \n   \n}\n.textbox{\n    flex:1;\n    border: rgba(0, 0, 255, 0.281);\n    border-style: solid;\n    border-width:1px;\n    margin: 1em;\n    padding: 1em;\n}\n.content{\n    flex:1; \n    justify-content: stretch;\n    display:flex;\n    flex-wrap:wrap;\n    margin:1em;\n}\n.page{\n    display: flex;\n    flex-direction: column;\n    flex:1;\n    background-color: rgba(0, 0, 255, 0.397);\n    padding: 1.5em; \n\n}\n\n#p1c2textbox{\n    font-size: xx-large;\n    margin: 0.25em;\n}\n#headerMenu {\n    display:flex;\n    height: 4rem;         \n    justify-content: right; \n}\n.headerItem{\n    flex: 0 1 30rem;\n    max-width: 10rem;  \n    height: 3rem;         \n    background-color: rgba(0, 0, 255, 0.397);\n    border-style: ridge;\n    border-top-left-radius: 25%;\n    text-align: center;\n    font-size: x-large;\n    padding-top: 1rem;\n    padding-left: 1rem;\n}\n#header1, #header2, #header3{\n    border: hidden; \n    border-left:ridge; \n    border-right: ridge; \n}\n\n#header2, #header3{\n    border-bottom: ridge; \n}\n#header3 {\n    border-right: hidden;  \n}\n\n#nebula3{\n    max-width:66vw\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,cAAc;IACd,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;IACb,WAAW;;AAEf;AACA;IACI,MAAM;IACN,8BAA8B;IAC9B,mBAAmB;IACnB,gBAAgB;IAChB,WAAW;IACX,YAAY;AAChB;AACA;IACI,MAAM;IACN,wBAAwB;IACxB,YAAY;IACZ,cAAc;IACd,UAAU;AACd;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,MAAM;IACN,wCAAwC;IACxC,cAAc;;AAElB;;AAEA;IACI,mBAAmB;IACnB,cAAc;AAClB;AACA;IACI,YAAY;IACZ,YAAY;IACZ,sBAAsB;AAC1B;AACA;IACI,eAAe;IACf,gBAAgB;IAChB,YAAY;IACZ,wCAAwC;IACxC,mBAAmB;IACnB,2BAA2B;IAC3B,kBAAkB;IAClB,kBAAkB;IAClB,iBAAiB;IACjB,kBAAkB;AACtB;AACA;IACI,cAAc;IACd,iBAAiB;IACjB,mBAAmB;AACvB;;AAEA;IACI,oBAAoB;AACxB;AACA;IACI,oBAAoB;AACxB;;AAEA;IACI;AACJ",sourcesContent:["body{\n    max-width:95vw;\n    display: flex;\n    justify-content: center;\n}\n\n#content{\n    display: flex; \n    flex-direction: column; \n    height: 100vh; \n    width: 75vw; \n   \n}\n.textbox{\n    flex:1;\n    border: rgba(0, 0, 255, 0.281);\n    border-style: solid;\n    border-width:1px;\n    margin: 1em;\n    padding: 1em;\n}\n.content{\n    flex:1; \n    justify-content: stretch;\n    display:flex;\n    flex-wrap:wrap;\n    margin:1em;\n}\n.page{\n    display: flex;\n    flex-direction: column;\n    flex:1;\n    background-color: rgba(0, 0, 255, 0.397);\n    padding: 1.5em; \n\n}\n\n#p1c2textbox{\n    font-size: xx-large;\n    margin: 0.25em;\n}\n#headerMenu {\n    display:flex;\n    height: 4rem;         \n    justify-content: right; \n}\n.headerItem{\n    flex: 0 1 30rem;\n    max-width: 10rem;  \n    height: 3rem;         \n    background-color: rgba(0, 0, 255, 0.397);\n    border-style: ridge;\n    border-top-left-radius: 25%;\n    text-align: center;\n    font-size: x-large;\n    padding-top: 1rem;\n    padding-left: 1rem;\n}\n#header1, #header2, #header3{\n    border: hidden; \n    border-left:ridge; \n    border-right: ridge; \n}\n\n#header2, #header3{\n    border-bottom: ridge; \n}\n#header3 {\n    border-right: hidden;  \n}\n\n#nebula3{\n    max-width:66vw\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(i[d]=!0)}for(var l=0;l<e.length;l++){var s=[].concat(e[l]);r&&i[s[0]]||(void 0!==a&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=a),t&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=t):s[2]=t),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),n.push(s))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var d=e[c],l=r.base?d[0]+r.base:d[0],s=a[l]||0,A="".concat(l," ").concat(s);a[l]=s+1;var p=t(A),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var m=o(u,r);r.byIndex=c,n.splice(c,0,{identifier:A,updater:m,references:1})}i.push(A)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var d=r(e,o),l=0;l<a.length;l++){var s=t(a[l]);0===n[s].references&&(n[s].updater(),n.splice(s,1))}a=d}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},141:(e,n,t)=>{e.exports=t.p+"c00145874096f2cade66.jpeg"},796:(e,n,t)=>{e.exports=t.p+"899c7d3bdcbddefea7b9.jpg"},571:(e,n,t)=>{e.exports=t.p+"f6a14ee5ac76846318df.jpeg"}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),a=t(569),i=t.n(a),c=t(565),d=t.n(c),l=t(216),s=t.n(l),A=t(589),p=t.n(A),u=t(426),m={};m.styleTagTransform=p(),m.setAttributes=d(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=s(),n()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;var h=t(571),f=(t(141),t(796));const g=(e=>{const n=(e,n,t)=>{let r=document.createElement(e);return r.className=n,r.id=t,r};return{createNewElement:n,createHeaderMenu:e=>{const t=n("div","headerMenu","headerMenu");return e.forEach(((e,r)=>{r=n("div","headerItem",e),t.appendChild(r)})),t},clearPage:()=>{document.querySelector(".page").remove(),console.log("page removed")}}})(),C=document.querySelector("div"),b=g.createHeaderMenu(["header1","header2","header3"]);C.appendChild(b);const x=()=>{const e=g.createNewElement("div","page"),n=g.createNewElement("div","content","pageContent1"),t=g.createNewElement("div","content","pageContent2"),r=g.createNewElement("div","content","pageContent3"),o=g.createNewElement("div","textbox","p1c1textbox");o.textContent="here is some text content for this box";const a=g.createNewElement("img","imgHolder","p1c1ImgHolder");a.src=h;const i=g.createNewElement("div","textbox","p1c2textbox");i.textContent="Nebulas are very cool looking! ";const c=g.createNewElement("div","textbox","p1c3textbox");c.textContent="contact information:";const d=document.createElement("iframe");d.setAttribute("src","https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d63833.231980735676!2d73.14289741361111!3d-0.6301752026039324!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x24b599bfaafb7bbd%3A0x414509e181956289!2sMaldives!5e0!3m2!1sen!2sus!4v1639096087116!5m2!1sen!2sus"),d.setAttribute("width",400),d.setAttribute("height",300),d.setAttribute("loading","lazy"),d.setAttribute("style","border:0"),n.appendChild(o),n.appendChild(a),t.appendChild(i),r.appendChild(c),r.appendChild(d),e.appendChild(n),e.appendChild(t),e.appendChild(r),C.appendChild(e)};x();const v=document.querySelectorAll(".headerItem");v.forEach(((e,n)=>{let t=document.getElementById(e.id);t.textContent=t.id,t.addEventListener("click",(()=>{switch(v.forEach((e=>{document.getElementById(e.id).style.borderBottom="ridge"})),t.style.borderBottom="hidden",g.clearPage(),n){case 0:x(),console.log("loadpage 1");break;case 1:(()=>{const e=g.createNewElement("div","page"),n=g.createNewElement("div","content","pageContent1"),t=g.createNewElement("div","content","pageContent2"),r=g.createNewElement("div","content","pageContent3"),o=g.createNewElement("img","image","nebula3");o.src=f,n.appendChild(o),e.appendChild(n),e.appendChild(t),e.appendChild(r),C.appendChild(e)})(),console.log("loadPageTwo()");break;case 2:(()=>{const e=g.createNewElement("div","page"),n=g.createNewElement("div","content","pageContent1"),t=g.createNewElement("div","content","pageContent2"),r=g.createNewElement("div","content","pageContent3");e.appendChild(n),e.appendChild(t),e.appendChild(r),C.appendChild(e)})(),console.log("loadPageThree()")}console.log("click")}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,